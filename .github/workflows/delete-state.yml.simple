name: 'Destroy-Terraform-gitops'

env:
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
  TF_VAR_AWS_REGION: ${{ secrets.AWS_REGION }}
  
on:
  delete:
    branches:
      - develop
      - uat
      - main
      - master

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: develop

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
     
    - name: Clean up
      if: github.event.ref_type == 'branch'
      run: |
            echo "Clean up for branch ${{ github.event.ref }}"
      
    - name: Set output Branch name
      id: vars
      shell: bash
      run: |
        echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"
    
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false

    - name: Setup Terraform remote
      working-directory: ./remote-state
      if: | 
        ( ${{ github.event.ref }} == 'develop'|| 
        ${{ github.event.ref }} == 'uat' )   
        && github.event_name == 'deleted'
      env:
        TF_VAR_GIT_REPO_NAME: ${{ github.event.repository.name }}
        TF_VAR_GIT_BRANCH: ${{ github.event.ref }}
        GIT_BRANCH: ${{ github.event.ref }}
      run: |
        terraform init
        terraform validate
        terraform apply -input=false -auto-approve -var-file='../settingaws.tfvars' || true
        chmod +x "../script/setbackend.sh"
        ../script/setbackend.sh ${{ github.event.ref }}
        rm -rf *.tfstate
     
    - name:  Prod Setup Terraform remote 
      working-directory: ./remote-state
      if: | 
        ( ${{ github.event.ref }} == 'develop'|| 
        ${{ github.event.ref }} == 'uat' )  
        && github.event_name == 'deleted'
      env:
        TF_VAR_GIT_REPO_NAME: ${{ github.event.repository.name }}
        TF_VAR_GIT_BRANCH: prod 
        GIT_BRANCH: prod
      run: |
        terraform init
        terraform validate
        terraform apply -input=false -auto-approve -var-file='../settingaws.tfvars' || true
        chmod +x "../script/setbackend.sh"
        ../script/setbackend.sh ${{ github.event.ref }}
        rm -rf *.tfstate

    - name: Setup Terraform remote pipeline
      working-directory: ./remote-state
      env:
        TF_VAR_GIT_REPO_NAME: ${{ github.event.repository.name }}
        TF_VAR_GIT_BRANCH: ${{ github.event.ref }}-pipeline
      run: |
        terraform init
        terraform validate
        terraform apply -input=false -auto-approve -var-file='../settingaws.tfvars' || true
        chmod +x "../script/setbackend.sh"
        ../script/setbackend.sh pipeline
        rm -rf *.tfstate 
   

    - name: Terraform Destroy
      if: |
        ( ${{ github.event.ref }} == 'develop'|| 
        ${{ github.event.ref }} == 'uat' )  
        && github.event_name == 'deleted'
      working-directory: ./environment/${{ github.event.ref }}
      run: |
        terraform init
        terraform destroy -auto-approve -var-file='../../settingaws.tfvars'

    - name: Prod Terraform Destroy
      if: |
        ( ${{ github.event.ref }} == 'main'|| 
        ${{ github.event.ref }} == 'master' )  
        && github.event_name == 'deleted'
      working-directory: ./environment/prod
      run: |
        terraform init
        terraform destroy -auto-approve -var-file='../../settingaws.tfvars'

     
        
    - name: Delete AWS pipeline
      working-directory: ./global/AWS-pipeline
      if: github.event_name == 'deleted'
      env:
        TF_VAR_ENV_NAME: ${{ github.event.ref }}
        TF_VAR_BRANCH_NAME: ${{ github.event.ref }}
        TF_VAR_PROJECT_IAC_NAME: ${{ github.event.repository.name }}
        TF_VAR_REPO_IAC_ID: ${{ github.repository }}
      run: |
        terraform init
        terraform destroy -auto-approve -var-file='../../settingaws.tfvars'

      



